# 워크플로우 이름
name: Test_Crawl_and_Save_to_DynamoDB

# [추가] 동시 실행 제어: 이 워크플로우는 한 번에 하나만 실행됩니다.
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

on:
  push:
    branches: [ "main" ]
    paths:
      - 'Study/**.py'

# 실행할 작업
jobs:
  crawl-and-save:
    runs-on: ubuntu-latest
    
    # [추가] 타임아웃: 이 작업은 15분 이상 실행되면 자동 실패합니다.
    timeout-minutes: 15

    steps:
    # ... (기존 steps 내용과 동일) ...
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
# ... (기존의 checkout, setup-python, install dependencies, configure-aws-credentials 단계)

    #  [추가 1] 네이버 API 상태 확인 단계
    - name: Check Naver API Status
      env:
        NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
        NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
      # curl 명령어로 API를 호출해보고, 응답이 성공(200 OK)인지 확인합니다.
      # --fail 옵션은 4xx, 5xx 에러 발생 시 워크플로우를 즉시 실패시킵니다.
      # > /dev/null 은 성공 시 결과 내용은 로그에 출력하지 않아 깔끔하게 만듭니다.
      run: |
        curl --fail -H "X-Naver-Client-Id: ${NAVER_CLIENT_ID}" -H "X-Naver-Client-Secret: ${NAVER_CLIENT_SECRET}" \
        "https://openapi.naver.com/v1/search/news.json?query=test&display=1" > /dev/null

    #  [추가 2] AWS DynamoDB 연결 확인 단계
    - name: Check AWS DynamoDB Connection
      # aws cli 명령어로 테이블 정보를 읽어봅니다.
      # 이 명령이 성공하면, 자격 증명(credentials)이 유효하고 테이블에 접근 가능하다는 의미입니다.
      run: |
        aws dynamodb describe-table --table-name News_Data_v1 > /dev/null


    # 5. 최종 파이썬 스크립트를 실행합니다. 
    - name: Run Python script
      working-directory: ./Study  
      env:
        NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
        NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: python API_GitHub_AWSDB.py --test